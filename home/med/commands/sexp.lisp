(in-package :med)

(defun beginning-of-top-level-form (buffer)
  "Move to the start of a top-level form.
A top-level form is designated by an open parenthesis at the start of a line."
  (let ((point (buffer-point buffer)))
    (setf (mark-charpos point) 0)
    (loop
       (when (eql (character-right-of point) #\()
         (return))
       (when (not (previous-line (mark-line point)))
         (error "Can't find start of top-level form."))
       (setf (mark-line point) (previous-line (mark-line point))))))

(defun symbol-at-point (buffer)
  (save-excursion (buffer)
    (move-sexp buffer 1)
    (with-mark (point (buffer-point buffer))
      (move-sexp buffer -1)
      (buffer-string buffer point (buffer-point buffer)))))

(defun find-matching-paren-command ()
  "Jump the cursor the paren that matches the one under the cursor."
  ;; FIXME: skip parens in strings
  (with-mark (point (buffer-point (current-buffer *editor*)))
    (let* ((buffer (current-buffer *editor*))
           (c (line-character (mark-line point) (mark-charpos point))))
        (when (char= c #\))
           (beginning-of-top-level-form buffer)
           (let ((string (buffer-string buffer point (buffer-point buffer)))
                 (count 1))
             (do ((i (1- (length string)) (decf i)))
                 ((< i 0))
                (unless (and (> i 1) (and (char= (char string (1- i)) #\\)
                                          (char= (char string (- i 2)) #\#)))
                  (case (char string i)
                    (#\( (decf count))
                    (#\) (incf count))))
              (when (zerop count)
                (move-mark (buffer-point buffer) i)
                (return)))))
         (when (char= c #\()
           (beginning-of-top-level-form buffer)
           (move-sexp buffer)
           (let ((string (buffer-string buffer point (buffer-point buffer)))
                 (count 0))
             (do ((i 0 (incf i)))
                 ((= i (length string)))
                (unless (and (> i 1) (and (char= (char string (1- i)) #\\)
                                          (char= (char string (- i 2)) #\#)))
                  (case (char string i)
                    (#\( (incf count))
                    (#\) (decf count))))
                (when (zerop count)
                  (move-mark (buffer-point buffer) (- (length string)))
                  (move-mark (buffer-point buffer) i)
                  (return))))))))

(defun find-symbol-at-point-command ()
  (let* ((buffer (current-buffer *editor*))
         (symbol (symbol-at-point buffer)))
    (loop 
      (move-sexp buffer 1)
      (search-forward buffer symbol)
      (move-sexp buffer -1)
      (when (string= (symbol-at-point buffer) symbol)
          (return)))))

